version: 2.1
orbs:
  slack: circleci/slack@4.12.1
  aws: circleci/aws-cli@3.1.5
setup-aws:
  description: setup aws
  steps:
    - aws/setup:
        aws-access-key-id: AWS_ACCESS_KEY_ID
        aws-secret-access-key: AWS_SECRET_ACCESS_KEY
        aws-region: AWS_DEFAULT_REGION
destroy-infra:
  description: using for rollback
  parameters:
    stack_name:
      type: string
  steps:
    - run:
        name: rollback when railed
        command: aws cloudformation delete-stack --stack-name "<<parameters.stack_name>>"
        when: on_fail
jobs:
  slack-notify:
    docker:
      - image: 'cimg/base:stable'
    steps:
      - slack/notify:
          event: fail
          mentions: '@EngineeringTeam'
          template: basic_fail_1
      - slack/notify:
          event: pass
          template: success_tagged_deploy_1

  build-frontend:
    docker:
      - image: node:14-alpine
    steps:
      - checkout
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
  build-backend:
    docker:
      - image: node:14-alpine
    steps:
      - checkout
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
  test-frontend:
    docker:
      - image: node:14-alpine
    steps:
      - checkout
      - run:
          name: Unit testing for FE
          command: |
            cd frontend
            npm install
            npm run test
  test-backend:
    docker:
      - image: node:14-alpine
    steps:
      - checkout
      - run:
          name: Unit testing for BE
          command: |
            cd backend
            npm install
            npm run test
  scan-frontend:
    docker:
      - image: node:14-alpine
    steps:
      - checkout
      - run:
          name: Scanning FE
          command: |
            cd frontend
            npm install
            npm audit --audit-level=critical
  scan-backend:
    docker:
      - image: node:14-alpine
    steps:
      - checkout
      - run:
          name: Scanning BE
          command: |
            cd backend
            npm install
            npm audit --audit-level=critical
  deploy-infrastructure-be:
    docker:
      - image: node:14-alpine
    working_directory: ~/project
    steps:
      - checkout
      - setup-aws
      - run:
          name: infrastructure in BE
          command: |
            aws cloudformation deploy \
             --template-file .circleci/files/backend.yml \
               --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
               --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
               --tags project=udapeople
      - run:
          name: Failed command
          command: |
            echo "Ready to failed"
            exit 1
      - destroy-infra:
          stack_name: udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
workflows:
  default:
    jobs:
      - slack-notify:
          context: global
      - build-frontend:
          context: global
      - build-backend:
          context: global
      - test-frontend:
          requires:
            - build-frontend
      - test-backend:
          requires:
            - build-backend
      - scan-frontend:
          requires:
            - build-frontend
      - scan-backend:
          requires:
            - build-backend
      - deploy-infrastructure-be:
          requires:
            - build-backend
            - test-backend
            - scan-backend
