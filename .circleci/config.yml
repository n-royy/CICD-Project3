version: 2.1
orbs:
  slack: circleci/slack@4.12.1
  aws: circleci/aws-cli@3.1.5
  python: circleci/python@2.0.3
commands:
  setup-aws:
    description: setup aws
    steps:
      - aws/setup:
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
          aws-region: AWS_DEFAULT_REGION
  destroy-infra:
    description: using for rollback
    parameters:
      stack_name:
        type: string
    steps:
      - run:
          name: rollback when railed
          command: aws cloudformation delete-stack --stack-name "<<parameters.stack_name>>"
          when: on_fail
jobs:
  slack-notify:
    docker:
      - image: 'cimg/base:stable'
    steps:
      - slack/notify:
          event: fail
          mentions: '@EngineeringTeam'
          template: basic_fail_1
      - slack/notify:
          event: pass
          template: success_tagged_deploy_1

  build-frontend:
    docker:
      - image: node:14-alpine
    steps:
      - checkout
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
  build-backend:
    docker:
      - image: node:14-alpine
    steps:
      - checkout
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
  test-frontend:
    docker:
      - image: node:14-alpine
    steps:
      - checkout
      - run:
          name: Unit testing for FE
          command: |
            cd frontend
            npm install
            npm run test
  test-backend:
    docker:
      - image: node:14-alpine
    steps:
      - checkout
      - run:
          name: Unit testing for BE
          command: |
            cd backend
            npm install
            npm run test
  scan-frontend:
    docker:
      - image: node:14-alpine
    steps:
      - checkout
      - run:
          name: Scanning FE
          command: |
            cd frontend
            npm install
            npm audit --audit-level=critical
  scan-backend:
    docker:
      - image: node:14-alpine
    steps:
      - checkout
      - run:
          name: Scanning BE
          command: |
            cd backend
            npm install
            npm audit --audit-level=critical
  deploy-infrastructure-be:
    docker:
      - image: node:14-alpine
    working_directory: ~/project
    steps:
      - checkout
      - setup-aws
      # - run:
      #     name: infrastructure in BE
      #     command: |
      #       aws cloudformation deploy \
      #        --template-file .circleci/files/backend.yml \
      #          --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
      #          --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
      #          --tags project=udapeople
      - run:
          name: create inventory
          command: |
            chmod +x .circleci/bash/IPAddress.sh
            echo [web] > .circleci/ansible/inventory.txt
            .circleci/bash/IPAddress.sh "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" >> .circleci/ansible/inventory.txt
      - run: cat .circleci/ansible/inventory.txt
      - save_cache:
          paths:
            - .circleci/ansible/inventory.txt
          key: inventory-{{ .Revision  }}
  deploy-infrastructure-fe:
    docker:
      - image: node:14-alpine
    working_directory: ~/project
    steps:
      - checkout
      - setup_aws
      - run:
          name: infrastructure in FE
          command: |
            aws cloudformation deploy \
             --template-file .circleci/files/frontend.yml \
               --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
               --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
               --tags project=udapeople
      - destroy_infra:
          stack_name: udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
  configure-infra:
    executor: python/default
    working_directory: ~/project
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - 5e:0a:cf:5d:a3:74:92:9a:8b:9f:eb:dc:50:6b:16:75
      - restore_cache:
          key: inventory-{{ .Revision  }}
      - run:
          name: install ansible
          command: pip install --user ansible
      - run:
          name: configure with ansible
          command: ansible-playbook -i .circleci/ansible/inventory.txt .circleci/ansible/configure-server.yml
workflows:
  default:
    jobs:
      # - slack-notify:
      #     context: global
      # - build-frontend:
      #     context: global
      # - build-backend:
      #     context: global
      # - test-frontend:
      #     requires:
      #       - build-frontend
      # - test-backend:
      #     requires:
      #       - build-backend
      # - scan-frontend:
      #     requires:
      #       - build-frontend
      # - scan-backend:
      #     requires:
      #       - build-backend
      # - deploy-infrastructure-be:
      #     requires:
      #       - build-backend
      #       - test-backend
      #       - scan-backend
      - deploy-infrastructure-be
      # - deploy_infra_fe

      - configure-infra:
          requires:
            - deploy-infrastructure-be
